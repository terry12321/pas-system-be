let qp = require('./qp');
let dev = { host: `dev.flex-solver.app`, user: 'qp_test', password: 'P@ssw0rd', database: `flexpos3`, limit: 2 };
let moment = require('moment');
const Big = require('big.js');
const Decimal = require('decimal.js');
const SqlError = require('./SqlError');
moment.toString = () => {
    return this.format(`YYYY-MM-DD HH:mm:ss`);
}
// let local = { host: `localhost`, user: `root`, password: `admin`, database: `testdb`, limit: 2 };
function makeid(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

function generateArr(number) {
    let people = [];
    for (i = 0; i < number; i++) {
        people.push({
            name: makeid(7),
            height: Math.floor(Math.random() * 200),
            weight: Math.floor(Math.random() * 80)
        })
    }
    return people;
}

async function todo(schemaName) {
    let con;
    try {
        let gtoDao = { datetime: moment(), gtoDate: moment(), firstReceiptId: Big(12), lastReceiptId: new Decimal(123) }
        // console.log(gtoDao.objectToValues())
        await qp.run(`insert into gtorecords set ?`, [gtoDao], dev);
        // qp.debug = true;
        // let parameter = { code: `KIOSK`, name: `JERRY` };
        // let employees = await qp.selectFirst(`select * from employees where code = :code or name like concat(:name, '%')`, parameter, dev);
        // console.log(employees);
        con = await qp.connectWithTbegin(dev);
        await qp.printClass(`receipsdfts`, con);
        let builder = await qp.getBuilderSingleton(`queues`, con);
        let body = {
            station: `K1`,
            queueNumber: `A123`, //varchar(45) & NO Null - 
            isAvailable: 1, //tinyint(1) & NO Null - 
            calledDatetime: `1990-01-01`, //timestamp & NO Null - 
            dismissedDatetime: `1990-01-01`, //timestamp & NO Null - 
            queueStatus: `1990-01-01`, //varchar(300) & NO Null - 
        };
        let dao = builder.construct(body, `allowNull`);
        let queueArr = [dao, dao, dao, dao, dao];
        let result = await qp.bulkUpsert(`queues`, queueArr, con, [`queueNumber`, `isAvailable`, `calledDatetime`, `dismissedDatetime`, `queueStatus`]);

        // let result = await qp.run(`insert into queues set ?`, [dao], con);
        console.log(result);
        await qp.commitAndCloseConnection(con);
    } catch (err) {
        await qp.rollbackAndCloseConnection(con);
        if (err.sql)
            console.log(err.sql);
        console.log(err);
    }
}


class Queue {
    constructor(dao) {
        if (typeof dao === 'object') {
            for (let key of Object.keys(dao)) {
                this[key] = dao[key];
            }
        }
    }
}

todo();